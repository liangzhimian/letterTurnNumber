// 把方法写入到 String 的 prototype 中
// 那么所有字符串都可以直接调用这个 turnNum 的函数
// 例子： 'aaaa'.turnNum() 即可
String.prototype.turnNum = function() {
    let res = 0
    // 把调用函数的字符串转成数组
    // 再通过 map 遍历，把每一个字符串分别用 charCodeAt 转成数字
    // 因为 a 转换数字后是 27，那么减去 96 就可以把 a-z 转成 1-26 了
    this.split('').forEach((v, i) => {
        res += (v.charCodeAt(0) - 96) * Math.pow(26, i)
    })
    // 通过遍历，计算每一个的值
    // 计算公式推导：
    // 'ba' 表示 26 + 1
    // 两位数的时 'bc' ==> [2, 3]
    // 								第2位数 3 代表 3个26 ==> 3 * 26^1  ==> 次方刚好是 2-1
    // 假设三位数 'cba' ==> [3, 2, 1]
    // 								第3位数 1 代表 1个26² ==> 3 * 26^2 ==> 次方刚好是 3-1
    // 以此类推得到公式				第i位数 n 代表 n个26的 i-1 次方 ==> n*26^(n-1)
    // 最后刚好26的零次方是1，满足需求不需判断
    return res
}